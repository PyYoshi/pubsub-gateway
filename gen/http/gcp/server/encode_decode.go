// Code generated by goa v3.0.2, DO NOT EDIT.
//
// gcp HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/PyYoshi/pubsub-gateway/design -o ./

package server

import (
	"context"
	"io"
	"net/http"
	"unicode/utf8"

	gcpviews "github.com/PyYoshi/pubsub-gateway/gen/gcp/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodePublishResponse returns an encoder for responses returned by the gcp
// publish endpoint.
func EncodePublishResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*gcpviews.PubsubGatewayGcpPublish)
		enc := encoder(ctx, w)
		body := NewPublishResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePublishRequest returns a decoder for requests sent to the gcp publish
// endpoint.
func DecodePublishRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PublishRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePublishRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			topic string

			params = mux.Vars(r)
		)
		topic = params["topic"]
		if utf8.RuneCountInString(topic) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("topic", topic, utf8.RuneCountInString(topic), 1, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewPublishGcpPublishRequestType(&body, topic)

		return payload, nil
	}
}
