// Code generated by goa v3.0.2, DO NOT EDIT.
//
// healthz HTTP server
//
// Command:
// $ goa gen github.com/PyYoshi/cloud_pubsub_gateway/design -o ./

package server

import (
	"context"
	"net/http"

	healthz "github.com/PyYoshi/cloud_pubsub_gateway/gen/healthz"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the healthz service endpoint HTTP handlers.
type Server struct {
	Mounts    []*MountPoint
	Readiness http.Handler
	Liveness  http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the healthz service endpoints.
func New(
	e *healthz.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Readiness", "GET", "/v1/healthz/readiness"},
			{"Liveness", "GET", "/v1/healthz/liveness"},
		},
		Readiness: NewReadinessHandler(e.Readiness, mux, dec, enc, eh),
		Liveness:  NewLivenessHandler(e.Liveness, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "healthz" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Readiness = m(s.Readiness)
	s.Liveness = m(s.Liveness)
}

// Mount configures the mux to serve the healthz endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountReadinessHandler(mux, h.Readiness)
	MountLivenessHandler(mux, h.Liveness)
}

// MountReadinessHandler configures the mux to serve the "healthz" service
// "readiness" endpoint.
func MountReadinessHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/healthz/readiness", f)
}

// NewReadinessHandler creates a HTTP handler which loads the HTTP request and
// calls the "healthz" service "readiness" endpoint.
func NewReadinessHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		encodeResponse = EncodeReadinessResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "readiness")
		ctx = context.WithValue(ctx, goa.ServiceKey, "healthz")

		res, err := endpoint(ctx, nil)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountLivenessHandler configures the mux to serve the "healthz" service
// "liveness" endpoint.
func MountLivenessHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/healthz/liveness", f)
}

// NewLivenessHandler creates a HTTP handler which loads the HTTP request and
// calls the "healthz" service "liveness" endpoint.
func NewLivenessHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		encodeResponse = EncodeLivenessResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "liveness")
		ctx = context.WithValue(ctx, goa.ServiceKey, "healthz")

		res, err := endpoint(ctx, nil)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}
