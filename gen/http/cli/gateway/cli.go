// Code generated by goa v3.13.1, DO NOT EDIT.
//
// gateway HTTP client CLI support package
//
// Command:
// $ goa gen github.com/PyYoshi/pubsub-gateway/design -o ./

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	gcpc "github.com/PyYoshi/pubsub-gateway/gen/http/gcp/client"
	healthzc "github.com/PyYoshi/pubsub-gateway/gen/http/healthz/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `gcp publish
healthz (readiness|liveness)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` gcp publish --body '{
      "message": "166"
   }' --topic "9"` + "\n" +
		os.Args[0] + ` healthz readiness` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		gcpFlags = flag.NewFlagSet("gcp", flag.ContinueOnError)

		gcpPublishFlags     = flag.NewFlagSet("publish", flag.ExitOnError)
		gcpPublishBodyFlag  = gcpPublishFlags.String("body", "REQUIRED", "")
		gcpPublishTopicFlag = gcpPublishFlags.String("topic", "REQUIRED", "Cloud Pub/SubのTopic")

		healthzFlags = flag.NewFlagSet("healthz", flag.ContinueOnError)

		healthzReadinessFlags = flag.NewFlagSet("readiness", flag.ExitOnError)

		healthzLivenessFlags = flag.NewFlagSet("liveness", flag.ExitOnError)
	)
	gcpFlags.Usage = gcpUsage
	gcpPublishFlags.Usage = gcpPublishUsage

	healthzFlags.Usage = healthzUsage
	healthzReadinessFlags.Usage = healthzReadinessUsage
	healthzLivenessFlags.Usage = healthzLivenessUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "gcp":
			svcf = gcpFlags
		case "healthz":
			svcf = healthzFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "gcp":
			switch epn {
			case "publish":
				epf = gcpPublishFlags

			}

		case "healthz":
			switch epn {
			case "readiness":
				epf = healthzReadinessFlags

			case "liveness":
				epf = healthzLivenessFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "gcp":
			c := gcpc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "publish":
				endpoint = c.Publish()
				data, err = gcpc.BuildPublishPayload(*gcpPublishBodyFlag, *gcpPublishTopicFlag)
			}
		case "healthz":
			c := healthzc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "readiness":
				endpoint = c.Readiness()
				data = nil
			case "liveness":
				endpoint = c.Liveness()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// gcpUsage displays the usage of the gcp command and its subcommands.
func gcpUsage() {
	fmt.Fprintf(os.Stderr, `Google Cloud Pub/Sub向けサービス
Usage:
    %[1]s [globalflags] gcp COMMAND [flags]

COMMAND:
    publish: httpプロトコルを経由してCloud Pub/Subにメッセージを渡すエンドポイント

Additional help:
    %[1]s gcp COMMAND --help
`, os.Args[0])
}
func gcpPublishUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] gcp publish -body JSON -topic STRING

httpプロトコルを経由してCloud Pub/Subにメッセージを渡すエンドポイント
    -body JSON: 
    -topic STRING: Cloud Pub/SubのTopic

Example:
    %[1]s gcp publish --body '{
      "message": "166"
   }' --topic "9"
`, os.Args[0])
}

// healthzUsage displays the usage of the healthz command and its subcommands.
func healthzUsage() {
	fmt.Fprintf(os.Stderr, `ヘルスチェックサービス
Usage:
    %[1]s [globalflags] healthz COMMAND [flags]

COMMAND:
    readiness: サーバが準備完了状態でいるかチェックするエンドポイント
    liveness: サーバが生きているかチェックするエンドポイント

Additional help:
    %[1]s healthz COMMAND --help
`, os.Args[0])
}
func healthzReadinessUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] healthz readiness

サーバが準備完了状態でいるかチェックするエンドポイント

Example:
    %[1]s healthz readiness
`, os.Args[0])
}

func healthzLivenessUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] healthz liveness

サーバが生きているかチェックするエンドポイント

Example:
    %[1]s healthz liveness
`, os.Args[0])
}
